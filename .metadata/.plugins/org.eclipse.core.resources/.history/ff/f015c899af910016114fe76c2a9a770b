import edu.princeton.cs.algs4.StdIn;


public class merge_code_test {



private static void merge(Comparable[] name, Comparable aux[], int lo, int mid, int hi)
{int i = lo, j = mid+1, k;
for(k = lo; k <=hi; k++)
	aux[k] = name[k];
for(k = lo; k = hi; k++)
	if (i > mid) name[k] = aux[j++];
	else if (j > hi) name[k] = aux[i++];
	else if (less(aux[j], aux[i])) name[k] = aux[j++];
	else name[k] = aux[i++];
}
private static Comparable[] aux;
public static void sort(String[] name, int i, int j){
	aux = new String [name.length];
	sort(name, 0, name.length -1);
}
/*private static void sort(Comparable[] name, int lo, int hi)
{ 
	if (hi <= lo) return;
	int mid = lo + (hi - lo)/2;
	sort(name, lo, mid);
	sort(name, mid + 1, hi);
	merge(name, lo, mid, hi);
	System.out.println();
}}*/

private static boolean less(Comparable v, Comparable w)
{return v.compareTo(w) < 0; }

private static void exch(Comparable[] name, int i, int j)
{Comparable t = name[i]; name[i] = name[j]; name[j] = t;}

public static void sort(Comparable[] name){

	int N = name.length;
	for(int i = 0; i < N; i++){
		int min = i;
		for (int j = i +1; j < N; j++)
			if (less(name[j], name[min])) min = j;
		exch(name, i, min);
	}
}
}



















private static boolean less(Comparable v, Comparable w)
{return v.compareTo(w) < 0; }

private static void exch(Comparable[] name, int i, int j)
{Comparable t = name[i]; name[i] = name[j]; name[j] = t;}

public static void sort(Comparable[] name){

	int N = name.length;
	for(int i = 0; i < N; i++){
		int min = i;
		for (int j = i +1; j < N; j++)
			if (less(name[j], name[min])) min = j;
		exch(name, i, min);
	}
}
public static boolean isSorted(Comparable[] name){
	for(int i = 1; i < name.length; i++)
		if (less(name[i], name[i-1])) return false;
	return true;			
	}
public static void main(String[] args){
String[] name = StdIn.readAllStrings();
sort(name);
assert isSorted(name);
show(name);
}

}
	
