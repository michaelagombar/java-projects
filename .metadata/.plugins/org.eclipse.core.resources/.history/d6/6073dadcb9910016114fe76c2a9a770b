import java.util.Arrays;

import edu.princeton.cs.algs4.Merge;
import edu.princeton.cs.algs4.StdIn;

//import edu.princeton.cs.algs4.StdOut;
public class Week_3_Assignement_1 {

		public class Merge {

		    // This class should not be instantiated.
		    private Merge() {}

		    // stably merge a[lo .. mid] with a[mid+1 ..hi] using aux[lo .. hi]
		    private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int hi) {
		        // precondition: a[lo .. mid] and a[mid+1 .. hi] are sorted subarrays
		        assert isSorted(a, lo, mid);
		        assert isSorted(a, mid+1, hi);
		        //Arrays.sort(a);
		        // copy to aux[]
		        for (int k = lo; k <= hi; k++) {
		            aux[k] = a[k]; 
		        }

		        // merge back to a[]
		        int i = lo, j = mid+1;
		        for (int k = lo; k <= hi; k++) {
		            if      (i > mid)              a[k] = aux[j++];
		            else if (j > hi)               a[k] = aux[i++];
		            else if (less(aux[j], aux[i])) a[k] = aux[j++];
		            else                           a[k] = aux[i++];
		        }

		        // postcondition: a[lo .. hi] is sorted
		        assert isSorted(a, lo, hi);
		    }

		    // mergesort a[lo..hi] using auxiliary array aux[lo..hi]
		    private static void sort(Comparable[] a, Comparable[] aux, int lo, int hi) {
		        if (hi <= lo) return;
		        int mid = lo + (hi - lo) / 2;
		        sort(aux, a, lo, mid);
		        sort(aux, a, mid + 1, hi);
		        merge(a, aux, lo, mid, hi);
		    }

		    /**
		     * Rearranges the array in ascending order, using the natural order.
		     * @param a the array to be sorted
		     */
		    public static void sort(Comparable[] a) {
		        Comparable[] aux = new Comparable[a.length];
		        sort(a, aux, 0, a.length-1);
		        assert isSorted(a);
		    }

}

public static void main(String[] args) {
	String [] a = new String[] {"Joe", "Alfred", "Paul", "Mekke", "Taco"};
	for (int i = 0; i < a.length; i++){
		System.out.println(a[i]);
		Arrays.sort(a);
	}
}}